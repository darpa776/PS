#include <iostream>
#include <vector>
using namespace std;

int plan[10];
int horse[4];
int sum = 0;
int ans = 0;

int route[33][6] = {
	{0,1,2,3,4,5},//0: 출발
	{2,2,3,4,5,6},//1
	{4,3,4,5,6,7},//2
	{6,4,5,6,7,8},//3
	{8,5,6,7,8,9},//4
	{10,21,22,23,24,25},//5
	{12,7,8,9,10,11},//6
	{14,8,9,10,11,12},//7
	{16,9,10,11,12,13},//8
	{18,10,11,12,13,14},//9
	{20,28,27,24,25,26},//10
	{22,12,13,14,15,16},//11
	{24,13,14,15,16,17},//12
	{26,14,15,16,17,18},//13
	{28,15,16,17,18,19},//14
	{30,31,30,29,24,25},//15
	{32,17,18,19,20,32},//16
	{34,18,19,20,32,32},//17
	{36,19,20,32,32,32},//18
	{38,20,32,32,32,32},//19
	{40,32,32,32,32,32},//20
	{13,22,23,24,25,26},//21
	{16,23,24,25,26,20},//22
	{19,24,25,26,20,32},//23
	{25,25,26,20,32,32},//24
	{30,26,20,32,32,32},//25
	{35,20,32,32,32,32},//26
	{24,24,25,26,20,32},//27
	{22,27,24,25,26,20},//28
	{26,24,25,26,20,32},//29
	{27,29,24,25,26,20},//30
	{28,30,29,24,25,26},//31
	{0,32,32,32,32,32}//32: 도착
};//해당 인덱스로 이동할 경우 얻을 점수와, 다음 이동 5칸

void dfs(int cnt) {

	if (cnt >= 10)
	{
		ans = max(ans, sum);
		return;
	}
	
	//이동 후 점수 획득
	for (int i = 0; i < 4; i++) {
		int pos = horse[i];//node의 idx
		int flag = 0;
		//도착한 곳에 다른 말이 있으면 안된다.
		for (int j = 0; j < 4; j++) {
			if(horse[j]!=32 && horse[j] == route[pos][plan[cnt]] )//도착지점이 아니고 현재 말이 갈 곳에 다른 말이 있으면
				flag=1;
		}
		if(flag==0){
		horse[i] = route[pos][plan[cnt]];//이동하기
		sum += route[horse[i]][0];//점수 획득
		dfs(cnt + 1);
		sum -= route[horse[i]][0];
		horse[i] = pos;//원래 있던 이전 위치로 이동
		}
	}
	return;
}


int main(){
	for (int i = 0; i < 10; i++)
		cin >> plan[i];

	//완전 탐색, 백트래킹
	
		dfs(0);
	
	cout << ans << endl;
	//얻을 수 있는 점수의 최댓값을 출력하기	
	return 0;
}
